
using System.Collections.Generic;

public class User
{
    public long UserId { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public string? Phone { get; set; }

    public ICollection<Borrow>? Borrows { get; set; }
}
//////////////////////////////////////////////////////////////////////////
using System.Collections.Generic;

public class Admin
{
    public long AdminId { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }

    public ICollection<Book>? Books { get; set; }
}

//////////////////////////////////////////////////////////////////////////
using System.Collections.Generic;

public class Category
{
    public long CategoryId { get; set; }
    public string Name { get; set; }

    public ICollection<Book>? Books { get; set; }
}
//////////////////////////////////////////////////////////////////////////
using System.Collections.Generic;

public class Book
{
    public long BookId { get; set; }
    public string Title { get; set; }
    public string Author { get; set; }
    public string? Description { get; set; }

    public long? CategoryId { get; set; }
    public Category? Category { get; set; }

    public long? AdminId { get; set; }
    public Admin? Admin { get; set; }

    public ICollection<Borrow>? Borrows { get; set; }
}

//////////////////////////////////////////////////////////////////////////
using System;

public class Borrow
{
    public long BorrowId { get; set; }

    public long? UserId { get; set; }
    public User? User { get; set; }

    public long? BookId { get; set; }
    public Book? Book { get; set; }

    public DateTimeOffset BorrowDate { get; set; }
}









//////////////////////////////////////////////////////////////////////////

using Microsoft.EntityFrameworkCore;

public class LibraryContext : DbContext
{
    public LibraryContext(DbContextOptions<LibraryContext> options)
        : base(options)
    {
    }

    public DbSet<User> Users { get; set; }
    public DbSet<Admin> Admins { get; set; }
    public DbSet<Category> Categories { get; set; }
    public DbSet<Book> Books { get; set; }
    public DbSet<Borrow> Borrows { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Book>()
            .HasOne(b => b.Category)
            .WithMany(c => c.Books)
            .HasForeignKey(b => b.CategoryId);

        modelBuilder.Entity<Book>()
            .HasOne(b => b.Admin)
            .WithMany(a => a.Books)
            .HasForeignKey(b => b.AdminId);

        modelBuilder.Entity<Borrow>()
            .HasOne(b => b.User)
            .WithMany(u => u.Borrows)
            .HasForeignKey(b => b.UserId);

        modelBuilder.Entity<Borrow>()
            .HasOne(b => b.Book)
            .WithMany(bk => bk.Borrows)
            .HasForeignKey(b => b.BookId);
    }
}
////////////////////////////////////////////////////

•	أضف السطر التالي إلى Startup.cs أو Program.cs (حسب نسخة .NET):
csharp
CopyEdit


services.AddDbContext<LibraryContext>(options =>
    options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
////////////////////////////////////////////////////////////////////////////////////////

•	اضبط الاتصال بقاعدة البيانات في appsettings.json.
